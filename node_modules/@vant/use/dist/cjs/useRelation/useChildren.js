"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.flattenVNodes = flattenVNodes;
exports.sortChildren = sortChildren;
exports.useChildren = useChildren;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _vue = require("vue");

function flattenVNodes(children) {
  var result = [];

  var traverse = function traverse(children) {
    if (Array.isArray(children)) {
      children.forEach(function (child) {
        if ((0, _vue.isVNode)(child)) {
          var _child$component;

          result.push(child);

          if ((_child$component = child.component) != null && _child$component.subTree) {
            traverse(child.component.subTree.children);
          }

          if (child.children) {
            traverse(child.children);
          }
        }
      });
    }
  };

  traverse(children);
  return result;
} // sort children instances by vnodes order


function sortChildren(parent, publicChildren, internalChildren) {
  var vnodes = flattenVNodes(parent.subTree.children);
  internalChildren.sort(function (a, b) {
    return vnodes.indexOf(a.vnode) - vnodes.indexOf(b.vnode);
  });
  var orderedPublicChildren = internalChildren.map(function (item) {
    return item.proxy;
  });
  publicChildren.sort(function (a, b) {
    var indexA = orderedPublicChildren.indexOf(a);
    var indexB = orderedPublicChildren.indexOf(b);
    return indexA - indexB;
  });
}

function useChildren(key) {
  var publicChildren = (0, _vue.reactive)([]);
  var internalChildren = (0, _vue.reactive)([]);
  var parent = (0, _vue.getCurrentInstance)();

  var linkChildren = function linkChildren(value) {
    var link = function link(child) {
      if (child.proxy) {
        internalChildren.push(child);
        publicChildren.push(child.proxy);
        sortChildren(parent, publicChildren, internalChildren);
      }
    };

    var unlink = function unlink(child) {
      var index = internalChildren.indexOf(child);
      publicChildren.splice(index, 1);
      internalChildren.splice(index, 1);
    };

    (0, _vue.provide)(key, (0, _extends2.default)({
      link: link,
      unlink: unlink,
      children: publicChildren,
      internalChildren: internalChildren
    }, value));
  };

  return {
    children: publicChildren,
    linkChildren: linkChildren
  };
}